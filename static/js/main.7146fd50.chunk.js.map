{"version":3,"sources":["components/Nav.js","components/Balance.js","components/Transfer.js","components/Transfers.js","components/Content.js","serviceWorker.js","drizzleOptions.js","index.js","components/App.js"],"names":["components_Nav","_ref","accounts","react_default","a","createElement","Navbar","bg","variant","expand","Brand","href","Collapse","id","Nav","className","Link","concat","Balance","useCacheCall","drizzleReactHooks","useDrizzle","drizzleState","useDrizzleState","account","balances","accountBalances","fromWei","drizzle","web3","utils","etherBalance","tokenBalance","Card","text","Body","Title","Table","responsive","style","color","Transfer","_useState","useState","_useState2","Object","slicedToArray","address","setAddress","_useState3","_useState4","amount","setAmount","_useState5","_useState6","submit","setSubmit","_useCacheSend","useCacheSend","send","status","transferTokens","useCallback","toWei","useEffect","Form","Group","controlId","Label","Control","type","placeholder","onInput","e","target","value","Button","size","onClick","toUpperCase","Transfers","transfers","useCacheEvents","useMemo","fromBlock","values","map","evs","returnValues","transfer","index","key","from","to","Content","Container","Row","Col","Boolean","window","location","hostname","match","options","block","fallback","url","contracts","events","Token","polls","Drizzle","drizzleOptions","ReactDOM","render","drizzle_react","DrizzleProvider","contractList","length","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7146fd50.chunk.js","sourcesContent":["import React from \"react\";\nimport { Navbar, Nav } from 'react-bootstrap';\n\nexport default ({ accounts }) => {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n      <Navbar.Brand href=\"#home\">Token DApp</Navbar.Brand>\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n        </Nav>\n      </Navbar.Collapse>\n      <Nav.Link href={`https://etherscan.io/address/${accounts[0]}`}>{accounts[0]}</Nav.Link>\n    </Navbar>\n  );\n};\n","import React from \"react\";\nimport { drizzleReactHooks } from 'drizzle-react';\nimport { Card, Table } from 'react-bootstrap';\n\nexport default () => {\n  const { useCacheCall } = drizzleReactHooks.useDrizzle();\n  const drizzleState = drizzleReactHooks.useDrizzleState(drizzleState => ({\n    account: drizzleState.accounts[0],\n    balances: drizzleState.accountBalances,\n  }));\n\n  const { drizzle } = drizzleReactHooks.useDrizzle();\n  const fromWei = drizzle.web3.utils.fromWei;\n\n  const etherBalance = fromWei(`${drizzleState.balances[drizzleState.account] || 0}`);\n  const tokenBalance = fromWei(`${useCacheCall('Token', 'balanceOf', drizzleState.account) || 0}`);\n\n  return (\n    <Card bg=\"dark\" text=\"white\">\n      <Card.Body>\n        <Card.Title>Balance</Card.Title>\n          <Table responsive variant=\"dark\">\n            <tbody>\n              <tr>\n                <td>ETH</td>\n                <td style={{ color: \"#28a745\" }}>{etherBalance}</td>\n              </tr>\n              <tr>\n                <td>DAPP</td>\n                <td style={{ color: \"#28a745\" }}>{tokenBalance}</td>\n              </tr>\n            </tbody>\n          </Table>\n      </Card.Body>\n    </Card>\n  )\n};\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport { Card, Form, Button } from 'react-bootstrap';\nimport { drizzleReactHooks } from 'drizzle-react';\n\nexport default () => {\n  const [address, setAddress] = useState('');\n  const [amount, setAmount] = useState('');\n  const [submit, setSubmit] = useState(false);\n\n  // https://github.com/trufflesuite/drizzle-react#usecachesend\n  const { useCacheSend } = drizzleReactHooks.useDrizzle();\n  // https://github.com/trufflesuite/drizzle-react/blob/04bdb7883271dd300eff3aab47a132869f02a627/src/hooks/create-use-cache-send.js#L18\n  // the function returns status, not transactions\n  const { send, status } = useCacheSend('Token', 'transfer');\n  const transferTokens = useCallback(({address, amount}) => send(address, amount), [send]);\n\n\n  const { drizzle } = drizzleReactHooks.useDrizzle();\n  const toWei = drizzle.web3.utils.toWei;\n\n  useEffect(() => {\n    if (submit) {\n      setSubmit(false);\n      // convert to wei\n      transferTokens({address, amount: toWei(`${amount || 0}`)});\n    }\n  }, [submit, transferTokens, address, amount, toWei]);\n\n  return (\n    <Card bg=\"dark\" text=\"white\">\n      <Card.Body>\n        <Card.Title>Transfer Tokens</Card.Title>\n        <Form>\n          <Form.Group controlId=\"formBasicEmail\">\n            <Form.Label>Destination Address</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Destination address 0x...\"\n              onInput={e => setAddress(e.target.value)}\n            />\n          </Form.Group>\n\n          <Form.Group controlId=\"formBasicPassword\">\n            <Form.Label>Token Amount</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Token Amount\"\n              onInput={e => setAmount(e.target.value)}\n            />\n          </Form.Group>\n          <Button variant=\"secondary\" size=\"lg\" onClick={(e) => setSubmit(true)}>\n            { (!status || status === \"success\") ? \"TRANSFER\" : status.toUpperCase() }\n          </Button>\n        </Form>\n      </Card.Body>\n    </Card>\n  )\n};\n","import React, { useMemo } from \"react\";\nimport { Card, Table } from 'react-bootstrap';\nimport { drizzleReactHooks } from 'drizzle-react';\n\nexport default () => {\n  // https://github.com/trufflesuite/drizzle-react#usecachesend\n  const { useCacheEvents } = drizzleReactHooks.useDrizzle();\n\n  // Fetch transfers\n  const transfers = useCacheEvents(\n    'Token', 'Transfer', useMemo(() => ({ fromBlock: 0 }), [])\n  );\n\n  let values = [];\n  if (transfers) {\n    values = transfers.map(evs => evs.returnValues);\n  }\n\n  const { drizzle } = drizzleReactHooks.useDrizzle();\n  const fromWei = drizzle.web3.utils.fromWei;\n\n  return (\n    <Card bg=\"dark\" text=\"white\">\n      <Card.Body>\n        <Card.Title>Transfers</Card.Title>\n        <Table responsive size=\"sm\" variant=\"dark\">\n          <thead>\n            <tr>\n              <th>From</th>\n              <th>To</th>\n              <th>Amount</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              values.map((transfer, index) => {\n                return (\n                  <tr key={index} size=\"sm\">\n                    <td style={{ color: \"#dc3545\" }}>\n                      {transfer.from}\n                    </td>\n                    <td style={{ color: \"#28a745\" }}>{transfer.to}</td>\n                    <td>{fromWei(transfer.value)}</td>\n                  </tr>\n                )\n              })\n            }\n          </tbody>\n        </Table>\n      </Card.Body>\n    </Card>\n  )\n};\n","import React from \"react\";\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Balance from './Balance';\nimport Transfer from './Transfer';\nimport Transfers from './Transfers';\n\nexport default () => {\n  return (\n    <Container>\n      <Row className=\"p-1\">\n        <Col>\n          <Balance />\n        </Col>\n      </Row>\n      <Row className=\"p-1\">\n        <Col>\n          <Transfer />\n        </Col>\n      </Row>\n      <Row className=\"p-1\">\n        <Col>\n          <Transfers />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import Token from \"./contracts/Token.json\";\n\nconst options = {\n  web3: {\n    block: false,\n    fallback: {\n      type: \"ws\",\n      url: \"ws://127.0.0.1:9545\",\n    },\n  },\n  contracts: [Token],\n  events: {\n    Token: [\"Transfer\"],\n  },\n  polls: {\n    accounts: 1500,\n  },\n};\n\nexport default options;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Drizzle } from 'drizzle';\nimport { drizzleReactHooks } from 'drizzle-react';\n\n\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport \"./index.css\";\n\nimport drizzleOptions from \"./drizzleOptions\";\nconst drizzle = new Drizzle(drizzleOptions);\n\nReactDOM.render(\n  <drizzleReactHooks.DrizzleProvider drizzle={drizzle}>\n    <App />\n  </drizzleReactHooks.DrizzleProvider>\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { drizzleReactHooks } from 'drizzle-react';\nimport Nav from './Nav';\nimport Content from './Content';\n\nexport default () => {\n  // https://github.com/trufflesuite/drizzle-react#react-hooks-support-experimental\n  const drizzleState = drizzleReactHooks.useDrizzleState(drizzleState => ({\n    accounts: drizzleState.accounts\n  }));\n\n  const { drizzle } = drizzleReactHooks.useDrizzle();\n\n  return (\n    <div>\n      <Nav accounts={drizzleState.accounts} />\n      {\n        drizzle && drizzle.contractList.length === 1 ?\n        <Content /> :\n        <div className=\"content\">\n          <p className=\"text-white\">\n            The smart contract is not on the current network.\n            Please select the Rinkeby network with Metamask\n          </p>\n        </div>\n      }\n    </div>\n  );\n}\n"],"sourceRoot":""}